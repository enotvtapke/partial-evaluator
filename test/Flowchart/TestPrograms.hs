{-# LANGUAGE OverloadedStrings #-}

module Flowchart.TestPrograms
  ( returnTwo,
    loop,
    swapPair,
    returnList,
    returnStr,
    indexOf,
    caseProgram,
    suffixFromProgram,
    insertProgram,
    lookupProgram,
    memberProgram,
    reduceProgram,
    evalProgram,
    commandsProgram,
    descrProgram,
    descrToProgProgram,
    searchContDescr,
    mixedSearchProgram,
    searchProgram,
    mixedTuringProgram,
    dynamicLabelsProgram,
  )
where

import Flowchart.AST
import Flowchart.DSL
import Prelude hiding (lookup, (+), (==))

returnTwo :: Program
returnTwo =
  program
    []
    [ bb
        "ret2"
        []
        $ ret (int 2)
    ]

loop :: Program
loop =
  program
    ["x"]
    [ bb
        "loop"
        ["x" @= var "x" + int 1]
        $ jumpc (var "x" == int 10) "ret" "loop",
      bb "ret" [] $ ret $ var "x"
    ]

swapPair :: Program
swapPair =
  program
    []
    [ bb
        "swap"
        ["x" @= cons (int 1) (int 2)]
        $ ret
        $ cons (tl $ var "x") (hd $ var "x")
    ]

returnList :: Program
returnList =
  program
    []
    [ bb
        "retList"
        ["x" @= cons (int 1) (cons (int 2) (list []))]
        $ ret
        $ var "x"
    ]

indexOf :: Program
indexOf =
  program
    ["list", "el"]
    [ bb "init" ["x" @= int 0] $ jumpc (hd (var "list") == var "el") "ret" "loop",
      bb "loop" ["x" @= var "x" + int 1, "list" @= tl (var "list")] $ jumpc (hd (var "list") == var "el") "ret" "loop",
      bb "ret" [] $ ret $ var "x"
    ]

returnStr :: Program
returnStr =
  program
    []
    [ bb
        "retStr"
        []
        $ ret
        $ s "str"
    ]

caseProgram :: Program
caseProgram =
  program
    ["operator"]
    [ bb "init" [] $ jumpc ("operator" == s "right") "ret" "cont1",
      bb "cont1" [] $ jumpc ("operator" == s "left") "ret" "cont2",
      bb "cont2" [] $ jumpc ("operator" == s "write") "ret" "cont3",
      bb "cont3" [] $ jumpc ("operator" == s "goto") "ret" "cont4",
      bb "cont4" [] $ jumpc ("operator" == s "if") "ret" "error",
      bb "error" [] $ ret $ s "error",
      bb "ret" [] $ ret $ var "operator"
    ]

suffixFromProgram :: Program
suffixFromProgram =
  program
    []
    [bb "init" ["x" @= list [s "a", s "b", s "c", s "d"]] $ ret $ suffixFrom "x" (int 1)]

insertProgram :: Program
insertProgram =
  program
    ["k"]
    [ bb
        "init"
        [ "m" @= list [pair (s "b") (int 3), pair (s "a") (int 11)],
          "m" @= insert "m" (pair (s "a") (int 10)) unit,
          "m" @= insert "m" "k" (int 2)
        ]
        $ ret "m"
    ]

lookupProgram :: Program
lookupProgram =
  program
    ["k"]
    [ bb
        "init"
        [ "m" @= list [pair (s "b") (int 3), pair (s "a") (int 11), pair (pair (s "c") (int 10)) (s "cv")]
        ]
        $ ret (lookup "m" "k")
    ]

memberProgram :: Program
memberProgram =
  program
    ["e"]
    [bb "init" ["x" @= list [s "a", s "b", s "c", s "d"]] $ ret $ member "x" "e"]

reduceProgram :: Program
reduceProgram =
  program
    ["vars"]
    [bb "init" ["z" @= expr (hd (pair ("x" + int 3) (s "s")) + "y")] $ ret $ reduce "z" "vars"]

evalProgram :: Program
evalProgram =
  program
    ["vars"]
    [bb "init" ["z" @= expr (hd (pair ("x" + int 3) (s "s")) + "y")] $ ret $ eval "z" "vars"]

commandsProgram :: Program
commandsProgram =
  program
    ["prog", "l"]
    [bb "init" [] $ ret $ commands "prog" "l"]

descrProgram :: Program
descrProgram =
  program
    ["namelist", "valuelist"]
    [ bb
        "[\"cont\",[]]"
        [ "namelist" @= tl "namelist",
          "valuelist" @= tl "valuelist"
        ]
        $ jump "search"
    ]

descrToProgProgram :: Program
descrToProgProgram =
  program
    ["program", "staticVars"]
    [ bb "init" [] $ ret (descrToProg "program" "staticVars" searchContDescr)
    ]

searchContDescr :: Expr
searchContDescr =
  list
    [ list
        [ list [s "goto", s "search"],
          list [s "assign", s "valuelist", expr (tl "valuelist")],
          list [s "assign", s "namelist", expr (tl "namelist")],
          pair (s "cont") (list [])
        ]
    ]

mixedSearchProgram :: Program
mixedSearchProgram =
  program
    ["valuelist"]
    [ bb
        "init"
        [ "valuelist" @= tl "valuelist",
          "valuelist" @= tl "valuelist"
        ]
        $ ret
        $ hd "valuelist"
    ]

searchProgram :: Program
searchProgram =
  program
    ["name", "namelist", "valuelist"]
    [ bb "init" [] $ jump "search",
      bb "search" [] $ jumpc ("name" == hd "namelist") "found" "cont",
      bb
        "cont"
        [ "valuelist" @= tl "valuelist",
          "namelist" @= tl "namelist"
        ]
        $ jump "search",
      bb "found" [] $ ret (hd "valuelist")
    ]

mixedTuringProgram :: Program
mixedTuringProgram =
  Program
    [VarName "right"]
    [ BasicBlock
        { label = Label "init",
          assigns = [],
          jmp = If (Eq (Constant $ IntLiteral 0) (Hd (Var (VarName "right")))) (Label "l0") (Label "l1")
        },
      BasicBlock
        { label = Label "l1",
          assigns =
            [ Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Constant $ List [])), -- TODO `Constant $ List []` is incorrect because there is no "generalization"
              Assignment (VarName "right") (Tl (Var (VarName "right")))
            ],
          jmp = If (Eq (Constant $ IntLiteral 0) (Hd (Var (VarName "right")))) (Label "l0") (Label "l1")
        },
      BasicBlock
        { label = Label "l0",
          assigns =
            [ Assignment (VarName "right") (Cons (Constant $ IntLiteral 1) (Tl (Var (VarName "right"))))
            ],
          jmp = Return (Var (VarName "right"))
        }
    ]

dynamicLabelsProgram :: Program
dynamicLabelsProgram =
  program
    ["prog"]
    [bb "init" [] $ ret $ dynamicLabels "prog"]

secondProj =
  Program
    [VarName "vs0"]
    [ BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List [])))], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "l0") (Label "l1")},
      BasicBlock {label = Label "l1", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "q", VarName "right"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "qtail") (Var (VarName "q")), Assignment (VarName "left") (Constant (List []))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "loop", assigns = [], jmp = If (Eq (Var (VarName "qtail")) (Constant (List []))) (Label "stop") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "instruction") (Hd (Var (VarName "qtail"))), Assignment (VarName "qtail") (Tl (Var (VarName "qtail"))), Assignment (VarName "operator") (Hd (Var (VarName "instruction")))], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "right"))) (Label "do-right") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "left"))) (Label "do-left") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "write"))) (Label "do-write") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "goto"))) (Label "do-goto") (Label "cont4")}, BasicBlock {label = Label "cont4", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "if"))) (Label "do-if") (Label "error")}, BasicBlock {label = Label "do-right", assigns = [Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Var (VarName "left"))), Assignment (VarName "right") (Tl (Var (VarName "right")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-left", assigns = [Assignment (VarName "right") (Cons (Hd (Var (VarName "left"))) (Var (VarName "right"))), Assignment (VarName "left") (Tl (Var (VarName "left")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-write", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "right") (Cons (Var (VarName "symbol")) (Tl (Var (VarName "right"))))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-goto", assigns = [Assignment (VarName "label") (Hd (Tl (Var (VarName "instruction"))))], jmp = Goto (Label "jump")}, BasicBlock {label = Label "do-if", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "label") (Hd (Tl (Tl (Var (VarName "instruction")))))], jmp = If (Eq (Var (VarName "symbol")) (Hd (Var (VarName "right")))) (Label "jump") (Label "loop")}, BasicBlock {label = Label "jump", assigns = [Assignment (VarName "qtail") (SuffixFrom (Var (VarName "q")) (Var (VarName "label")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Var (VarName "unknown operator"))}, BasicBlock {label = Label "stop", assigns = [], jmp = Return (Var (VarName "right"))}]))) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock
        { label = Label "l3",
          assigns =
            [ Assignment (VarName "command") (Hd (Var (VarName "bb"))),
              Assignment (VarName "bb") (Tl (Var (VarName "bb")))
            ],
          jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "l4") (Label "l5")
        },
      BasicBlock {label = Label "l5", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "l6") (Label "l7")},
      BasicBlock {label = Label "l7", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "l8") (Label "l9")},
      BasicBlock {label = Label "l9", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "l10") (Label "l11")},
      BasicBlock {label = Label "l11", assigns = [], jmp = Return (Constant (StringLiteral "error"))},
      BasicBlock {label = Label "l10", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l8", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "l12") (Label "l13")},
      BasicBlock {label = Label "l13", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l14") (Label "l15")},
      BasicBlock {label = Label "l15", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l16") (Label "l17")},
      BasicBlock {label = Label "l17", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l16", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l14", assigns = [], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l16") (Label "l17")},
      BasicBlock {label = Label "l12", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "l18") (Label "l19")},
      BasicBlock {label = Label "l19", assigns = [Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "q", VarName "right"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "qtail") (Var (VarName "q")), Assignment (VarName "left") (Constant (List []))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "loop", assigns = [], jmp = If (Eq (Var (VarName "qtail")) (Constant (List []))) (Label "stop") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "instruction") (Hd (Var (VarName "qtail"))), Assignment (VarName "qtail") (Tl (Var (VarName "qtail"))), Assignment (VarName "operator") (Hd (Var (VarName "instruction")))], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "right"))) (Label "do-right") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "left"))) (Label "do-left") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "write"))) (Label "do-write") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "goto"))) (Label "do-goto") (Label "cont4")}, BasicBlock {label = Label "cont4", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "if"))) (Label "do-if") (Label "error")}, BasicBlock {label = Label "do-right", assigns = [Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Var (VarName "left"))), Assignment (VarName "right") (Tl (Var (VarName "right")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-left", assigns = [Assignment (VarName "right") (Cons (Hd (Var (VarName "left"))) (Var (VarName "right"))), Assignment (VarName "left") (Tl (Var (VarName "left")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-write", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "right") (Cons (Var (VarName "symbol")) (Tl (Var (VarName "right"))))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-goto", assigns = [Assignment (VarName "label") (Hd (Tl (Var (VarName "instruction"))))], jmp = Goto (Label "jump")}, BasicBlock {label = Label "do-if", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "label") (Hd (Tl (Tl (Var (VarName "instruction")))))], jmp = If (Eq (Var (VarName "symbol")) (Hd (Var (VarName "right")))) (Label "jump") (Label "loop")}, BasicBlock {label = Label "jump", assigns = [Assignment (VarName "qtail") (SuffixFrom (Var (VarName "q")) (Var (VarName "label")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Var (VarName "unknown operator"))}, BasicBlock {label = Label "stop", assigns = [], jmp = Return (Var (VarName "right"))}]))) (Var (VarName "ppFalse")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l18", assigns = [Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "q", VarName "right"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "qtail") (Var (VarName "q")), Assignment (VarName "left") (Constant (List []))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "loop", assigns = [], jmp = If (Eq (Var (VarName "qtail")) (Constant (List []))) (Label "stop") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "instruction") (Hd (Var (VarName "qtail"))), Assignment (VarName "qtail") (Tl (Var (VarName "qtail"))), Assignment (VarName "operator") (Hd (Var (VarName "instruction")))], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "right"))) (Label "do-right") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "left"))) (Label "do-left") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "write"))) (Label "do-write") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "goto"))) (Label "do-goto") (Label "cont4")}, BasicBlock {label = Label "cont4", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "if"))) (Label "do-if") (Label "error")}, BasicBlock {label = Label "do-right", assigns = [Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Var (VarName "left"))), Assignment (VarName "right") (Tl (Var (VarName "right")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-left", assigns = [Assignment (VarName "right") (Cons (Hd (Var (VarName "left"))) (Var (VarName "right"))), Assignment (VarName "left") (Tl (Var (VarName "left")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-write", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "right") (Cons (Var (VarName "symbol")) (Tl (Var (VarName "right"))))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-goto", assigns = [Assignment (VarName "label") (Hd (Tl (Var (VarName "instruction"))))], jmp = Goto (Label "jump")}, BasicBlock {label = Label "do-if", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "label") (Hd (Tl (Tl (Var (VarName "instruction")))))], jmp = If (Eq (Var (VarName "symbol")) (Hd (Var (VarName "right")))) (Label "jump") (Label "loop")}, BasicBlock {label = Label "jump", assigns = [Assignment (VarName "qtail") (SuffixFrom (Var (VarName "q")) (Var (VarName "label")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Var (VarName "unknown operator"))}, BasicBlock {label = Label "stop", assigns = [], jmp = Return (Var (VarName "right"))}]))) (Var (VarName "ppTrue")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l6", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "q", VarName "right"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "qtail") (Var (VarName "q")), Assignment (VarName "left") (Constant (List []))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "loop", assigns = [], jmp = If (Eq (Var (VarName "qtail")) (Constant (List []))) (Label "stop") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "instruction") (Hd (Var (VarName "qtail"))), Assignment (VarName "qtail") (Tl (Var (VarName "qtail"))), Assignment (VarName "operator") (Hd (Var (VarName "instruction")))], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "right"))) (Label "do-right") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "left"))) (Label "do-left") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "write"))) (Label "do-write") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "goto"))) (Label "do-goto") (Label "cont4")}, BasicBlock {label = Label "cont4", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "if"))) (Label "do-if") (Label "error")}, BasicBlock {label = Label "do-right", assigns = [Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Var (VarName "left"))), Assignment (VarName "right") (Tl (Var (VarName "right")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-left", assigns = [Assignment (VarName "right") (Cons (Hd (Var (VarName "left"))) (Var (VarName "right"))), Assignment (VarName "left") (Tl (Var (VarName "left")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-write", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "right") (Cons (Var (VarName "symbol")) (Tl (Var (VarName "right"))))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-goto", assigns = [Assignment (VarName "label") (Hd (Tl (Var (VarName "instruction"))))], jmp = Goto (Label "jump")}, BasicBlock {label = Label "do-if", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "label") (Hd (Tl (Tl (Var (VarName "instruction")))))], jmp = If (Eq (Var (VarName "symbol")) (Hd (Var (VarName "right")))) (Label "jump") (Label "loop")}, BasicBlock {label = Label "jump", assigns = [Assignment (VarName "qtail") (SuffixFrom (Var (VarName "q")) (Var (VarName "label")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Var (VarName "unknown operator"))}, BasicBlock {label = Label "stop", assigns = [], jmp = Return (Var (VarName "right"))}]))) (Var (VarName "pp'")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l4", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "l20") (Label "l21")},
      BasicBlock {label = Label "l21", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l20", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l2", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Constant (List [])))], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "l0") (Label "l1")},
      BasicBlock {label = Label "l0", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Constant (Prog (Program [VarName "q", VarName "right"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "qtail") (Var (VarName "q")), Assignment (VarName "left") (Constant (List []))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "loop", assigns = [], jmp = If (Eq (Var (VarName "qtail")) (Constant (List []))) (Label "stop") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "instruction") (Hd (Var (VarName "qtail"))), Assignment (VarName "qtail") (Tl (Var (VarName "qtail"))), Assignment (VarName "operator") (Hd (Var (VarName "instruction")))], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "right"))) (Label "do-right") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "left"))) (Label "do-left") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "write"))) (Label "do-write") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "goto"))) (Label "do-goto") (Label "cont4")}, BasicBlock {label = Label "cont4", assigns = [], jmp = If (Eq (Var (VarName "operator")) (Constant (StringLiteral "if"))) (Label "do-if") (Label "error")}, BasicBlock {label = Label "do-right", assigns = [Assignment (VarName "left") (Cons (Hd (Var (VarName "right"))) (Var (VarName "left"))), Assignment (VarName "right") (Tl (Var (VarName "right")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-left", assigns = [Assignment (VarName "right") (Cons (Hd (Var (VarName "left"))) (Var (VarName "right"))), Assignment (VarName "left") (Tl (Var (VarName "left")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-write", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "right") (Cons (Var (VarName "symbol")) (Tl (Var (VarName "right"))))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "do-goto", assigns = [Assignment (VarName "label") (Hd (Tl (Var (VarName "instruction"))))], jmp = Goto (Label "jump")}, BasicBlock {label = Label "do-if", assigns = [Assignment (VarName "symbol") (Hd (Tl (Var (VarName "instruction")))), Assignment (VarName "label") (Hd (Tl (Tl (Var (VarName "instruction")))))], jmp = If (Eq (Var (VarName "symbol")) (Hd (Var (VarName "right")))) (Label "jump") (Label "loop")}, BasicBlock {label = Label "jump", assigns = [Assignment (VarName "qtail") (SuffixFrom (Var (VarName "q")) (Var (VarName "label")))], jmp = Goto (Label "loop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Var (VarName "unknown operator"))}, BasicBlock {label = Label "stop", assigns = [], jmp = Return (Var (VarName "right"))}]))) (Var (VarName "vs0")) (Constant (List []))))}
    ]

thirdProj =
  Program
    [VarName "vs0"]
    [ BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List [])))], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "l0") (Label "l1")},
      BasicBlock {label = Label "l1", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "program", VarName "vs0"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "marked") (Constant (List [])), Assignment (VarName "residual") (Constant (List []))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "blocksLoop", assigns = [], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "end") (Label "blocksLoopInit")}, BasicBlock {label = Label "blocksLoopInit", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "marked"))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "blocksLoopEpilogue", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Var (VarName "residual")))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "commandsLoop", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "blocksLoopEpilogue") (Label "commandsLoopInit")}, BasicBlock {label = Label "commandsLoopInit", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "assign") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "goto") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "if") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "return") (Label "error")}, BasicBlock {label = Label "assign", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "assignStatic") (Label "assignDyn")}, BasicBlock {label = Label "assignDyn", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "assignStatic", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "goto", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp'")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "if", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStatic") (Label "ifDynamic")}, BasicBlock {label = Label "ifStatic", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStaticTrue") (Label "ifStaticFalse")}, BasicBlock {label = Label "ifStaticTrue", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppTrue")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifStaticFalse", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppFalse")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifDynamic", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "addPpFalseToPendingCheck") (Label "addPpTrueToPending")}, BasicBlock {label = Label "addPpTrueToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "addPpFalseToPendingCheck")}, BasicBlock {label = Label "addPpFalseToPendingCheck", assigns = [], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "commandsLoop") (Label "addPpFalseToPending")}, BasicBlock {label = Label "addPpFalseToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "return", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Constant (StringLiteral "error"))}, BasicBlock {label = Label "end", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Var (VarName "program")) (Var (VarName "vs0")) (Var (VarName "residual"))))}, BasicBlock {label = Label "search", assigns = [], jmp = If (Eq (Var (VarName "pp")) (Hd (Var (VarName "pps")))) (Label "found") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "pps") (Tl (Var (VarName "pps")))], jmp = Goto (Label "search")}, BasicBlock {label = Label "found", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Hd (Var (VarName "pps"))))], jmp = Goto (Label "blocksLoopInit")}]))) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l3", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "l4") (Label "l5")},
      BasicBlock {label = Label "l5", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "l6") (Label "l7")},
      BasicBlock {label = Label "l7", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "l8") (Label "l9")},
      BasicBlock {label = Label "l9", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "l10") (Label "l11")},
      BasicBlock {label = Label "l11", assigns = [], jmp = Return (Constant (StringLiteral "error"))},
      BasicBlock {label = Label "l10", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l8", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "l12") (Label "l13")},
      BasicBlock {label = Label "l13", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l14") (Label "l15")},
      BasicBlock {label = Label "l15", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l16") (Label "l17")},
      BasicBlock {label = Label "l17", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l16", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l14", assigns = [], jmp = If (Or (Member (Constant (List [])) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "l16") (Label "l17")},
      BasicBlock {label = Label "l12", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "l18") (Label "l19")},
      BasicBlock {label = Label "l19", assigns = [Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "program", VarName "vs0"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "marked") (Constant (List [])), Assignment (VarName "residual") (Constant (List []))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "blocksLoop", assigns = [], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "end") (Label "blocksLoopInit")}, BasicBlock {label = Label "blocksLoopInit", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "marked"))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "blocksLoopEpilogue", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Var (VarName "residual")))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "commandsLoop", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "blocksLoopEpilogue") (Label "commandsLoopInit")}, BasicBlock {label = Label "commandsLoopInit", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "assign") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "goto") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "if") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "return") (Label "error")}, BasicBlock {label = Label "assign", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "assignStatic") (Label "assignDyn")}, BasicBlock {label = Label "assignDyn", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "assignStatic", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "goto", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp'")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "if", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStatic") (Label "ifDynamic")}, BasicBlock {label = Label "ifStatic", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStaticTrue") (Label "ifStaticFalse")}, BasicBlock {label = Label "ifStaticTrue", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppTrue")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifStaticFalse", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppFalse")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifDynamic", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "addPpFalseToPendingCheck") (Label "addPpTrueToPending")}, BasicBlock {label = Label "addPpTrueToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "addPpFalseToPendingCheck")}, BasicBlock {label = Label "addPpFalseToPendingCheck", assigns = [], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "commandsLoop") (Label "addPpFalseToPending")}, BasicBlock {label = Label "addPpFalseToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "return", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Constant (StringLiteral "error"))}, BasicBlock {label = Label "end", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Var (VarName "program")) (Var (VarName "vs0")) (Var (VarName "residual"))))}, BasicBlock {label = Label "search", assigns = [], jmp = If (Eq (Var (VarName "pp")) (Hd (Var (VarName "pps")))) (Label "found") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "pps") (Tl (Var (VarName "pps")))], jmp = Goto (Label "search")}, BasicBlock {label = Label "found", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Hd (Var (VarName "pps"))))], jmp = Goto (Label "blocksLoopInit")}]))) (Var (VarName "ppFalse")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l18", assigns = [Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "program", VarName "vs0"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "marked") (Constant (List [])), Assignment (VarName "residual") (Constant (List []))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "blocksLoop", assigns = [], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "end") (Label "blocksLoopInit")}, BasicBlock {label = Label "blocksLoopInit", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "marked"))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "blocksLoopEpilogue", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Var (VarName "residual")))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "commandsLoop", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "blocksLoopEpilogue") (Label "commandsLoopInit")}, BasicBlock {label = Label "commandsLoopInit", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "assign") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "goto") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "if") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "return") (Label "error")}, BasicBlock {label = Label "assign", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "assignStatic") (Label "assignDyn")}, BasicBlock {label = Label "assignDyn", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "assignStatic", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "goto", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp'")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "if", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStatic") (Label "ifDynamic")}, BasicBlock {label = Label "ifStatic", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStaticTrue") (Label "ifStaticFalse")}, BasicBlock {label = Label "ifStaticTrue", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppTrue")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifStaticFalse", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppFalse")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifDynamic", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "addPpFalseToPendingCheck") (Label "addPpTrueToPending")}, BasicBlock {label = Label "addPpTrueToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "addPpFalseToPendingCheck")}, BasicBlock {label = Label "addPpFalseToPendingCheck", assigns = [], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "commandsLoop") (Label "addPpFalseToPending")}, BasicBlock {label = Label "addPpFalseToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "return", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Constant (StringLiteral "error"))}, BasicBlock {label = Label "end", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Var (VarName "program")) (Var (VarName "vs0")) (Var (VarName "residual"))))}, BasicBlock {label = Label "search", assigns = [], jmp = If (Eq (Var (VarName "pp")) (Hd (Var (VarName "pps")))) (Label "found") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "pps") (Tl (Var (VarName "pps")))], jmp = Goto (Label "search")}, BasicBlock {label = Label "found", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Hd (Var (VarName "pps"))))], jmp = Goto (Label "blocksLoopInit")}]))) (Var (VarName "ppTrue")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l6", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Constant (Prog (Program [VarName "program", VarName "vs0"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "marked") (Constant (List [])), Assignment (VarName "residual") (Constant (List []))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "blocksLoop", assigns = [], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "end") (Label "blocksLoopInit")}, BasicBlock {label = Label "blocksLoopInit", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "marked"))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "blocksLoopEpilogue", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Var (VarName "residual")))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "commandsLoop", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "blocksLoopEpilogue") (Label "commandsLoopInit")}, BasicBlock {label = Label "commandsLoopInit", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "assign") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "goto") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "if") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "return") (Label "error")}, BasicBlock {label = Label "assign", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "assignStatic") (Label "assignDyn")}, BasicBlock {label = Label "assignDyn", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "assignStatic", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "goto", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp'")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "if", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStatic") (Label "ifDynamic")}, BasicBlock {label = Label "ifStatic", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStaticTrue") (Label "ifStaticFalse")}, BasicBlock {label = Label "ifStaticTrue", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppTrue")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifStaticFalse", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppFalse")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifDynamic", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "addPpFalseToPendingCheck") (Label "addPpTrueToPending")}, BasicBlock {label = Label "addPpTrueToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "addPpFalseToPendingCheck")}, BasicBlock {label = Label "addPpFalseToPendingCheck", assigns = [], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "commandsLoop") (Label "addPpFalseToPending")}, BasicBlock {label = Label "addPpFalseToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "return", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Constant (StringLiteral "error"))}, BasicBlock {label = Label "end", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Var (VarName "program")) (Var (VarName "vs0")) (Var (VarName "residual"))))}, BasicBlock {label = Label "search", assigns = [], jmp = If (Eq (Var (VarName "pp")) (Hd (Var (VarName "pps")))) (Label "found") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "pps") (Tl (Var (VarName "pps")))], jmp = Goto (Label "search")}, BasicBlock {label = Label "found", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Hd (Var (VarName "pps"))))], jmp = Goto (Label "blocksLoopInit")}]))) (Var (VarName "pp'")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l4", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "l20") (Label "l21")},
      BasicBlock {label = Label "l21", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l20", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "l2") (Label "l3")},
      BasicBlock {label = Label "l2", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Constant (List [])))], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "l0") (Label "l1")},
      BasicBlock {label = Label "l0", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Constant (Prog (Program [VarName "program", VarName "vs0"] [BasicBlock {label = Label "init", assigns = [Assignment (VarName "pending") (Cons (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List [])))) (Constant (List []))), Assignment (VarName "marked") (Constant (List [])), Assignment (VarName "residual") (Constant (List []))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "blocksLoop", assigns = [], jmp = If (Eq (Var (VarName "pending")) (Constant (List []))) (Label "end") (Label "blocksLoopInit")}, BasicBlock {label = Label "blocksLoopInit", assigns = [Assignment (VarName "pp") (Hd (Hd (Var (VarName "pending")))), Assignment (VarName "vs") (Hd (Tl (Hd (Var (VarName "pending"))))), Assignment (VarName "pending") (Tl (Var (VarName "pending"))), Assignment (VarName "marked") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "marked"))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp"))), Assignment (VarName "code") (Cons (Cons (Var (VarName "pp")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Constant (List [])))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "blocksLoopEpilogue", assigns = [Assignment (VarName "residual") (Cons (Var (VarName "code")) (Var (VarName "residual")))], jmp = Goto (Label "blocksLoop")}, BasicBlock {label = Label "commandsLoop", assigns = [], jmp = If (Eq (Var (VarName "bb")) (Constant (List []))) (Label "blocksLoopEpilogue") (Label "commandsLoopInit")}, BasicBlock {label = Label "commandsLoopInit", assigns = [Assignment (VarName "command") (Hd (Var (VarName "bb"))), Assignment (VarName "bb") (Tl (Var (VarName "bb")))], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "assign"))) (Label "assign") (Label "cont1")}, BasicBlock {label = Label "cont1", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "goto"))) (Label "goto") (Label "cont2")}, BasicBlock {label = Label "cont2", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "if"))) (Label "if") (Label "cont3")}, BasicBlock {label = Label "cont3", assigns = [], jmp = If (Eq (Hd (Var (VarName "command"))) (Constant (StringLiteral "return"))) (Label "return") (Label "error")}, BasicBlock {label = Label "assign", assigns = [Assignment (VarName "varName") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "varExpr") (Hd (Tl (Tl (Var (VarName "command")))))], jmp = If (IsStatic (Var (VarName "varExpr")) (Var (VarName "vs"))) (Label "assignStatic") (Label "assignDyn")}, BasicBlock {label = Label "assignDyn", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "assign")) (Cons (Var (VarName "varName")) (Cons (Reduce (Var (VarName "varExpr")) (Var (VarName "vs"))) (Constant (List []))))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "assignStatic", assigns = [Assignment (VarName "vs") (Insert (Var (VarName "vs")) (Var (VarName "varName")) (Eval (Var (VarName "varExpr")) (Var (VarName "vs"))))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "goto", assigns = [Assignment (VarName "pp'") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "pp'")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "if", assigns = [Assignment (VarName "cond") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "ppTrue") (Hd (Tl (Tl (Var (VarName "command"))))), Assignment (VarName "ppFalse") (Hd (Tl (Tl (Tl (Var (VarName "command"))))))], jmp = If (IsStatic (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStatic") (Label "ifDynamic")}, BasicBlock {label = Label "ifStatic", assigns = [], jmp = If (Eval (Var (VarName "cond")) (Var (VarName "vs"))) (Label "ifStaticTrue") (Label "ifStaticFalse")}, BasicBlock {label = Label "ifStaticTrue", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppTrue")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifStaticFalse", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Var (VarName "ppFalse")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "ifDynamic", assigns = [Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "if")) (Cons (Reduce (Var (VarName "cond")) (Var (VarName "vs"))) (Cons (ToLabel (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Cons (ToLabel (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Constant (List [])))))) (Var (VarName "code")))], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "addPpFalseToPendingCheck") (Label "addPpTrueToPending")}, BasicBlock {label = Label "addPpTrueToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppTrue")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "addPpFalseToPendingCheck")}, BasicBlock {label = Label "addPpFalseToPendingCheck", assigns = [], jmp = If (Or (Member (Var (VarName "marked")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List []))))) (Member (Var (VarName "pending")) (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))))) (Label "commandsLoop") (Label "addPpFalseToPending")}, BasicBlock {label = Label "addPpFalseToPending", assigns = [Assignment (VarName "pending") (Cons (Cons (Var (VarName "ppFalse")) (Cons (Var (VarName "vs")) (Constant (List [])))) (Var (VarName "pending")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "return", assigns = [Assignment (VarName "exp") (Hd (Tl (Var (VarName "command")))), Assignment (VarName "code") (Cons (Cons (Constant (StringLiteral "return")) (Cons (Reduce (Var (VarName "exp")) (Var (VarName "vs"))) (Constant (List [])))) (Var (VarName "code")))], jmp = Goto (Label "commandsLoop")}, BasicBlock {label = Label "error", assigns = [], jmp = Return (Constant (StringLiteral "error"))}, BasicBlock {label = Label "end", assigns = [], jmp = Return (CompressLabels (ToLabel (Cons (Constant (StringLiteral "init")) (Cons (Var (VarName "vs0")) (Constant (List []))))) (DescrToProg (Var (VarName "program")) (Var (VarName "vs0")) (Var (VarName "residual"))))}, BasicBlock {label = Label "search", assigns = [], jmp = If (Eq (Var (VarName "pp")) (Hd (Var (VarName "pps")))) (Label "found") (Label "cont")}, BasicBlock {label = Label "cont", assigns = [Assignment (VarName "pps") (Tl (Var (VarName "pps")))], jmp = Goto (Label "search")}, BasicBlock {label = Label "found", assigns = [Assignment (VarName "bb") (Commands (Var (VarName "program")) (Hd (Var (VarName "pps"))))], jmp = Goto (Label "blocksLoopInit")}]))) (Var (VarName "vs0")) (Constant (List []))))}
    ]